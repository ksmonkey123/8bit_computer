package ch.awae.custom8bit.microcode

import ch.awae.custom8bit.microcode.AddressSource.*
import ch.awae.custom8bit.microcode.AddressTarget.*
import ch.awae.custom8bit.microcode.AluOperation.*
import ch.awae.custom8bit.microcode.Condition.*
import ch.awae.custom8bit.microcode.DataSource.*
import ch.awae.custom8bit.microcode.DataTarget.*

val INSTRUCTION_SET: Set<Operation> = setOf(
    Operation(0x00, "NSWP A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = NIBBLE_SWAP)),
    Operation(0x01, "NSWP B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = NIBBLE_SWAP)),
    Operation(0x02, "NSWP C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = NIBBLE_SWAP)),
    Operation(0x03, "NSWP D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = NIBBLE_SWAP)),
    Operation(0x04, "SHL A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = SHIFT_LEFT)),
    Operation(0x05, "SHL B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = SHIFT_LEFT)),
    Operation(0x06, "SHL C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = SHIFT_LEFT)),
    Operation(0x07, "SHL D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = SHIFT_LEFT)),
    Operation(0x08, "SHR A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = SHIFT_RIGHT)),
    Operation(0x09, "SHR B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = SHIFT_RIGHT)),
    Operation(0x0a, "SHR C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = SHIFT_RIGHT)),
    Operation(0x0b, "SHR D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = SHIFT_RIGHT)),
    // 0x0c:f available
    Operation(0x10, "DECC A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = DECREMENT)),
    Operation(0x11, "DECC B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = DECREMENT)),
    Operation(0x12, "DECC C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = DECREMENT)),
    Operation(0x13, "DECC D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = DECREMENT)),
    Operation(0x14, "INCC A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = INCREMENT)),
    Operation(0x15, "INCC B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = INCREMENT)),
    Operation(0x16, "INCC C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = INCREMENT)),
    Operation(0x17, "INCC D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = INCREMENT)),
    Operation(0x18, "ADDC A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = ADDITION)),
    Operation(0x19, "ADDC B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = ADDITION)),
    Operation(0x1a, "ADDC C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = ADDITION)),
    Operation(0x1b, "ADDC D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = ADDITION)),
    Operation(0x1c, "SUBC A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = SUBTRACTION)),
    Operation(0x1d, "SUBC B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = SUBTRACTION)),
    Operation(0x1e, "SUBC C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = SUBTRACTION)),
    Operation(0x1f, "SUBC D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = SUBTRACTION)),
    // 0x20:3 available
    Operation(0x24, "AND A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = AND)),
    Operation(0x25, "AND B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = AND)),
    Operation(0x26, "AND C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = AND)),
    Operation(0x27, "AND D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = AND)),
    Operation(0x28, "IOR A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = IOR)),
    Operation(0x29, "IOR B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = IOR)),
    Operation(0x2a, "IOR C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = IOR)),
    Operation(0x2b, "IOR D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = IOR)),
    Operation(0x2c, "XOR A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = XOR)),
    Operation(0x2d, "XOR B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = XOR)),
    Operation(0x2e, "XOR C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = XOR)),
    Operation(0x2f, "XOR D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = XOR)),
    Operation(0x30, "NOT A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = INVERT)),
    Operation(0x31, "NOT B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = INVERT)),
    Operation(0x32, "NOT C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = INVERT)),
    Operation(0x33, "NOT D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = INVERT)),
    Operation(0x34, "NAND A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = NAND)),
    Operation(0x35, "NAND B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = NAND)),
    Operation(0x36, "NAND C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = NAND)),
    Operation(0x37, "NAND D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = NAND)),
    Operation(0x38, "INOR A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = INOR)),
    Operation(0x39, "INOR B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = INOR)),
    Operation(0x3a, "INOR C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = INOR)),
    Operation(0x3b, "INOR D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = INOR)),
    Operation(0x3c, "XNOR A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = XNOR)),
    Operation(0x3d, "XNOR B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = XNOR)),
    Operation(0x3e, "XNOR C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = XNOR)),
    Operation(0x3f, "XNOR D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = XNOR)),
    Operation(0x40, "LADD A", 1, false, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_ADDITION)),
    Operation(0x41, "LADD B", 1, false, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_ADDITION)),
    Operation(0x42, "LADD C", 1, false, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_ADDITION)),
    Operation(0x43, "LADD D", 1, false, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_ADDITION)),
    Operation(0x44, "LSUB A", 1, true, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_SUBTRACTION)),
    Operation(0x45, "LSUB B", 1, true, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_SUBTRACTION)),
    Operation(0x46, "LSUB C", 1, true, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_SUBTRACTION)),
    Operation(0x47, "LSUB D", 1, true, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_SUBTRACTION)),
    Operation(0x48, "LADDC A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_ADDITION)),
    Operation(0x49, "LADDC B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_ADDITION)),
    Operation(0x4a, "LADDC C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_ADDITION)),
    Operation(0x4b, "LADDC D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_ADDITION)),
    Operation(0x4c, "LSUBC A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_SUBTRACTION)),
    Operation(0x4d, "LSUBC B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_SUBTRACTION)),
    Operation(0x4e, "LSUBC C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_SUBTRACTION)),
    Operation(0x4f, "LSUBC D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_SUBTRACTION)),
    Operation(0x50, "COMPC A", 0, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = COMPLEMENT)),
    Operation(0x51, "COMPC B", 0, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = COMPLEMENT)),
    Operation(0x52, "COMPC C", 0, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = COMPLEMENT)),
    Operation(0x53, "COMPC D", 0, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = COMPLEMENT)),
    Operation(0x54, "LAND A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_AND)),
    Operation(0x55, "LAND B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_AND)),
    Operation(0x56, "LAND C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_AND)),
    Operation(0x57, "LAND D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_AND)),
    Operation(0x58, "LIOR A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_IOR)),
    Operation(0x59, "LIOR B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_IOR)),
    Operation(0x5a, "LIOR C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_IOR)),
    Operation(0x5b, "LIOR D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_IOR)),
    Operation(0x5c, "LXOR A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_XOR)),
    Operation(0x5d, "LXOR B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_XOR)),
    Operation(0x5e, "LXOR C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_XOR)),
    Operation(0x5f, "LXOR D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_XOR)),
    Operation(0x60, "COMP A", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = COMPLEMENT)),
    Operation(0x61, "COMP B", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = COMPLEMENT)),
    Operation(0x62, "COMP C", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = COMPLEMENT)),
    Operation(0x63, "COMP D", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = COMPLEMENT)),
    Operation(0x64, "LNAND A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_NAND)),
    Operation(0x65, "LNAND B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_NAND)),
    Operation(0x66, "LNAND C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_NAND)),
    Operation(0x67, "LNAND D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_NAND)),
    Operation(0x68, "LINOR A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_INOR)),
    Operation(0x69, "LINOR B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_INOR)),
    Operation(0x6a, "LINOR C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_INOR)),
    Operation(0x6b, "LINOR D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_INOR)),
    Operation(0x6c, "LXNOR A", 1, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = LITERAL_XNOR)),
    Operation(0x6d, "LXNOR B", 1, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = LITERAL_XNOR)),
    Operation(0x6e, "LXNOR C", 1, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = LITERAL_XNOR)),
    Operation(0x6f, "LXNOR D", 1, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = LITERAL_XNOR)),
    Operation(0x70, "DEC A", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = DECREMENT)),
    Operation(0x71, "DEC B", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = DECREMENT)),
    Operation(0x72, "DEC C", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = DECREMENT)),
    Operation(0x73, "DEC D", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = DECREMENT)),
    Operation(0x74, "INC A", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = INCREMENT)),
    Operation(0x75, "INC B", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = INCREMENT)),
    Operation(0x76, "INC C", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = INCREMENT)),
    Operation(0x77, "INC D", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = INCREMENT)),
    Operation(0x78, "ADD A", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = ADDITION)),
    Operation(0x79, "ADD B", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = ADDITION)),
    Operation(0x7a, "ADD C", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = ADDITION)),
    Operation(0x7b, "ADD D", 0, false, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = ADDITION)),
    Operation(0x7c, "SUB A", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_A, action = SUBTRACTION)),
    Operation(0x7d, "SUB B", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_B, action = SUBTRACTION)),
    Operation(0x7e, "SUB C", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_C, action = SUBTRACTION)),
    Operation(0x7f, "SUB D", 0, true, step0 = MicroOp(READ_ALU, WRITE_REG_D, action = SUBTRACTION)),
    Operation(0x80, "MOV A A", 0, step0 = MicroOp(READ_REG_A, WRITE_REG_A)),
    Operation(0x81, "MOV A B", 0, step0 = MicroOp(READ_REG_B, WRITE_REG_A)),
    Operation(0x82, "MOV A C", 0, step0 = MicroOp(READ_REG_C, WRITE_REG_A)),
    Operation(0x83, "MOV A D", 0, step0 = MicroOp(READ_REG_D, WRITE_REG_A)),
    Operation(0x84, "MOV B A", 0, step0 = MicroOp(READ_REG_A, WRITE_REG_B)),
    Operation(0x85, "MOV B B", 0, step0 = MicroOp(READ_REG_B, WRITE_REG_B)),
    Operation(0x86, "MOV B C", 0, step0 = MicroOp(READ_REG_C, WRITE_REG_B)),
    Operation(0x87, "MOV B D", 0, step0 = MicroOp(READ_REG_D, WRITE_REG_B)),
    Operation(0x88, "MOV C A", 0, step0 = MicroOp(READ_REG_A, WRITE_REG_C)),
    Operation(0x89, "MOV C B", 0, step0 = MicroOp(READ_REG_B, WRITE_REG_C)),
    Operation(0x8a, "MOV C C", 0, step0 = MicroOp(READ_REG_C, WRITE_REG_C)),
    Operation(0x8b, "MOV C D", 0, step0 = MicroOp(READ_REG_D, WRITE_REG_C)),
    Operation(0x8c, "MOV D A", 0, step0 = MicroOp(READ_REG_A, WRITE_REG_D)),
    Operation(0x8d, "MOV D B", 0, step0 = MicroOp(READ_REG_B, WRITE_REG_D)),
    Operation(0x8e, "MOV D C", 0, step0 = MicroOp(READ_REG_C, WRITE_REG_D)),
    Operation(0x8f, "MOV D D", 0, step0 = MicroOp(READ_REG_D, WRITE_REG_D)),
    Operation(0x90, "LOAD A", 2, step0 = MicroOp(READ_MEMORY, WRITE_REG_A, ADR_LITERAL)),
    Operation(0x91, "LOAD B", 2, step0 = MicroOp(READ_MEMORY, WRITE_REG_B, ADR_LITERAL)),
    Operation(0x92, "LOAD C", 2, step0 = MicroOp(READ_MEMORY, WRITE_REG_C, ADR_LITERAL)),
    Operation(0x93, "LOAD D", 2, step0 = MicroOp(READ_MEMORY, WRITE_REG_D, ADR_LITERAL)),
    Operation(0x94, "ILOAD A", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_A, ADR_REG_CD)),
    Operation(0x95, "ILOAD B", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_B, ADR_REG_CD)),
    Operation(0x96, "ILOAD C", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_C, ADR_REG_CD)),
    Operation(0x97, "ILOAD D", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_D, ADR_REG_CD)),
    Operation(0x98, "LLOAD A", 1, step0 = MicroOp(READ_LITERAL_1, WRITE_REG_A)),
    Operation(0x99, "LLOAD B", 1, step0 = MicroOp(READ_LITERAL_1, WRITE_REG_B)),
    Operation(0x9a, "LLOAD C", 1, step0 = MicroOp(READ_LITERAL_1, WRITE_REG_C)),
    Operation(0x9b, "LLOAD D", 1, step0 = MicroOp(READ_LITERAL_1, WRITE_REG_D)),
    Operation(
        0x9c,
        "PUSH A",
        0,
        step0 = MicroOp(addressSource = ADR_STACK_POINTER),
        step1 = MicroOp(READ_REG_A, WRITE_MEMORY, ADR_INCREMENTER, WRITE_STACK_POINTER),
    ),
    Operation(
        0x9d,
        "PUSH B",
        0,
        step0 = MicroOp(addressSource = ADR_STACK_POINTER),
        step1 = MicroOp(READ_REG_B, WRITE_MEMORY, ADR_INCREMENTER, WRITE_STACK_POINTER),
    ),
    Operation(
        0x9e,
        "PUSH C",
        0,
        step0 = MicroOp(addressSource = ADR_STACK_POINTER),
        step1 = MicroOp(READ_REG_C, WRITE_MEMORY, ADR_INCREMENTER, WRITE_STACK_POINTER),
    ),
    Operation(
        0x9f,
        "PUSH D",
        0,
        step0 = MicroOp(addressSource = ADR_STACK_POINTER),
        step1 = MicroOp(READ_REG_D, WRITE_MEMORY, ADR_INCREMENTER, WRITE_STACK_POINTER),
    ),
    Operation(0xa0, "STORE A", 2, step0 = MicroOp(READ_REG_A, WRITE_MEMORY, ADR_LITERAL)),
    Operation(0xa1, "STORE B", 2, step0 = MicroOp(READ_REG_B, WRITE_MEMORY, ADR_LITERAL)),
    Operation(0xa2, "STORE C", 2, step0 = MicroOp(READ_REG_C, WRITE_MEMORY, ADR_LITERAL)),
    Operation(0xa3, "STORE D", 2, step0 = MicroOp(READ_REG_D, WRITE_MEMORY, ADR_LITERAL)),
    Operation(0xa4, "ISTORE A", 0, step0 = MicroOp(READ_REG_A, WRITE_MEMORY, ADR_REG_CD)),
    Operation(0xa5, "ISTORE B", 0, step0 = MicroOp(READ_REG_B, WRITE_MEMORY, ADR_REG_CD)),
    Operation(0xa6, "ISTORE C", 0, step0 = MicroOp(READ_REG_C, WRITE_MEMORY, ADR_REG_CD)),
    Operation(0xa7, "ISTORE D", 0, step0 = MicroOp(READ_REG_D, WRITE_MEMORY, ADR_REG_CD)),
    Operation(0xa8, "PEEK A", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_A, ADR_STACK_POINTER)),
    Operation(0xa9, "PEEK B", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_B, ADR_STACK_POINTER)),
    Operation(0xaa, "PEEK C", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_C, ADR_STACK_POINTER)),
    Operation(0xab, "PEEK D", 0, step0 = MicroOp(READ_MEMORY, WRITE_REG_D, ADR_STACK_POINTER)),
    Operation(
        0xac, "POP A", 0,
        step0 = MicroOp(READ_MEMORY, WRITE_REG_A, ADR_STACK_POINTER),
        step1 = MicroOp(addressSource = ADR_INCREMENTER_DECREMENT, action = WRITE_STACK_POINTER),
    ),
    Operation(
        0xad, "POP B", 0,
        step0 = MicroOp(READ_MEMORY, WRITE_REG_B, ADR_STACK_POINTER),
        step1 = MicroOp(addressSource = ADR_INCREMENTER_DECREMENT, action = WRITE_STACK_POINTER),
    ),
    Operation(
        0xae, "POP C", 0,
        step0 = MicroOp(READ_MEMORY, WRITE_REG_C, ADR_STACK_POINTER),
        step1 = MicroOp(addressSource = ADR_INCREMENTER_DECREMENT, action = WRITE_STACK_POINTER),
    ),
    Operation(
        0xaf, "POP D", 0,
        step0 = MicroOp(READ_MEMORY, WRITE_REG_D, ADR_STACK_POINTER),
        step1 = MicroOp(addressSource = ADR_INCREMENTER_DECREMENT, action = WRITE_STACK_POINTER),
    ),
    Operation(
        0xb0,
        "BRCS",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(CARRY_SET)
    ),
    Operation(
        0xb1,
        "BRCC",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(CARRY_CLEAR)
    ),
    Operation(
        0xb2,
        "BRZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(ZERO)
    ),
    Operation(
        0xb3,
        "BRNZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(NOT_ZERO)
    ),
    Operation(
        0xb4,
        "BRLZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(NEGATIVE)
    ),
    Operation(
        0xb5,
        "BRGZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(POSITIVE)
    ),
    Operation(
        0xb6,
        "BRNLZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(NOT_NEGATIVE)
    ),
    Operation(
        0xb7,
        "BRNGZ",
        2,
        step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC).condition(NOT_POSITIVE)
    ),
    Operation(0xb8, "GOTO", 2, step0 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC)),
    Operation(0xb9, "IGOTO", 2, step0 = MicroOp(addressSource = ADR_REG_CD, action = WRITE_PC)),
    Operation(
        0xba, "CALL", 2,
        step0 = MicroOp(addressSource = ADR_STACK_POINTER),
        step1 = MicroOp(READ_PC_HIGH, WRITE_MEMORY, ADR_INCREMENTER),
        step2 = MicroOp(READ_PC_LOW, WRITE_MEMORY, ADR_INCREMENTER, WRITE_STACK_POINTER),
        step3 = MicroOp(addressSource = ADR_LITERAL, action = WRITE_PC),
    ),
    Operation(
        0xbb, "RETURN", 0,
        step0 = MicroOp(READ_MEMORY, WRITE_PC_LOW, ADR_STACK_POINTER),
        step1 = MicroOp(READ_MEMORY, WRITE_PC_HIGH, ADR_INCREMENTER_DECREMENT),
        step2 = MicroOp(addressSource = ADR_INCREMENTER_DECREMENT, action = WRITE_STACK_POINTER),
    ),
    // 0xbc, 0xbd, 0xbe, 0xbf available
    // 0xc0:f available
    // 0xd0:f available
    // 0xe0:f available
    Operation(0xf0, "SETC 0", 0, false),
    Operation(0xf1, "SETC 1", 0, true),
    // 0xf2:e available
    Operation(0xff, "NOP", 0),
)